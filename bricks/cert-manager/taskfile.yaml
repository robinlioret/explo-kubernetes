version: "3"

vars:
  CERT_MANAGER_CHART_VERSION: v1.16.2

tasks:
  # See https://cert-manager.io/docs/installation/helm/
  deploy:
    desc: "Deploy Cert-Manager." # TODO
    requires:
      vars:
        - CERT_MANAGER_CHART_VERSION
    cmds:
      - task: :init:check-installation
      - task: :brick:k3d:namespace:create
        vars:
          NAMESPACE: kube-security
      - task: certificate:create
      - task: :helm:add-repo
        vars:
          REPO_NAME: jetstack
          REPO_URL: https://charts.jetstack.io
      - task: :helm:install
        vars:
          REPO_NAME: jetstack
          CHART_NAME: cert-manager
          CHART_VERSION: "{{ .CERT_MANAGER_CHART_VERSION }}"
          RELEASE_NAME: cert-manager
          NAMESPACE: kube-security
          EXTRA: --set crds.enabled=true
          WAIT: "true"
      - task: root-certificate-secret:create
        vars:
          NAMESPACE: kube-security
          NAME: "ca-root"
      - task: cluster-issuer:deploy
        vars:
          NAMESPACE: kube-security

  remove:
    desc: "Remove Cert-Manager (does not delete created certificates)" # TODO
    cmds:
      - task: :init:check-installation
      - task: cluster-issuer:delete
        vars:
          NAMESPACE: kube-security
      - task: root-certificate-secret:delete
        vars:
          NAMESPACE: kube-security
          NAME: "ca-root"
      - task: :helm:uninstall
        vars:
          RELEASE_NAME: cert-manager
          NAMESPACE: kube-security
          WAIT: "true"
      - task: crds:delete

  redeploy:
    desc: "Removes the brick then redeploys it."
    cmds:
      - task: remove
      - task: deploy

  certificate:create:
    requires:
      vars:
        - ROOT_DIR
        - DOMAIN
    status:
      - test -f {{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.crt
      - test -f {{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.key
    cmds:
      - test -d {{ .ROOT_DIR }}/certificates/ || mkdir -p {{ .ROOT_DIR }}/certificates/
      - >-
        openssl req -x509 -newkey rsa:4096
        -keyout "{{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.key"
        -out "{{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.crt"
        -sha256 -days 3650 -nodes -subj "/CN={{ .DOMAIN }}"
        -addext "subjectAltName=DNS:{{ .DOMAIN }},DNS:*.{{ .DOMAIN }},IP:127.0.0.1"
      - task: :todo:add
        vars:
          CONTENT: >-
            (Optional) Add certificate \`./certificates/{{ .DOMAIN }}.crt\` to your system.
      - task: :todo:add
        vars:
          CONTENT: >-
            (Optional) Add certificate \`./certificates/{{ .DOMAIN }}.crt\` to your browser.

  certificate:delete:
    requires:
      vars:
        - ROOT_DIR
        - DOMAIN
    status:
      - test ! -f {{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.crt
      - test ! -f {{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.key
    cmds:
      - rm {{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.{crt,key}
      - task: :todo:remove
        vars:
          CONTENT: >-
            (Optional) Add certificate \`./certificates/{{ .DOMAIN }}.crt\` to your system.
      - task: :todo:remove
        vars:
          CONTENT: >-
            (Optional) Add certificate \`./certificates/{{ .DOMAIN }}.crt\` to your browser.

  test:
    cmds:
      - task: :init:check-installation
      - kubectl apply --server-side -f tests/certificate-test.yaml
      - kubectl wait --namespace default --for condition=Ready certificate example-com --timeout=60s
      - kubectl delete -f tests/certificate-test.yaml

  # -----------------------------------
  # INTERNAL TASKS
  # -----------------------------------

  root-certificate-secret:create:
    internal: true
    requires:
      vars:
        - ROOT_DIR
        - DOMAIN
        - NAMESPACE
        - NAME
    status:
      - kubectl get secret --namespace {{ .NAMESPACE }} {{ .NAME }}
    cmds:
      - kubectl create secret tls --namespace {{ .NAMESPACE }} {{ .NAME }}
        --key "{{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.key"
        --cert "{{ .ROOT_DIR }}/certificates/{{ .DOMAIN }}.crt"

  root-certificate-secret:delete:
    internal: true
    requires:
      vars:
        - NAMESPACE
        - NAME
    status:
      - test ! $(kubectl get secret --namespace {{ .NAMESPACE }} {{ .NAME }})
    cmds:
      - kubectl delete secret  --namespace {{ .NAMESPACE }} {{ .NAME }}

  cluster-issuer:deploy:
    internal: true
    requires:
      vars:
        - NAMESPACE
    status:
      - test $(kubectl get --namespace {{ .NAMESPACE }} clusterissuer --no-headers --selector=sandbox.local/issuer=ca 2> /dev/null | wc -l) = 1
    cmds:
      - kubectl apply --server-side --namespace {{ .NAMESPACE }} --filename ./assets/cluster-issuer.yaml

  cluster-issuer:delete:
    internal: true
    requires:
      vars:
        - NAMESPACE
    status:
      - test $(kubectl get --namespace {{ .NAMESPACE }} clusterissuer --no-headers --selector=sandbox.local/issuer=ca 2> /dev/null | wc -l) = 0
    cmds:
      - kubectl delete --namespace {{ .NAMESPACE }} --filename ./assets/cluster-issuer.yaml

  crds:delete:
    internal: true
    status:
      - test $(kubectl get crds --selector=app.kubernetes.io/name=cert-manager --no-headers 2> /dev/null | wc -l) = 0
    cmds:
      - kubectl delete crds --selector=app.kubernetes.io/name=cert-manager
